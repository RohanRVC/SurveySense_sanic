import aiofiles
import asyncio
import csv
import os

# Path to the "database" CSV file
DATABASE_FILE = "data.csv"

# Define the CSV headers
CSV_HEADERS = ["user_id", "overall_analysis", "cat_dog", "fur_value", "tail_value", "description"]

async def async_save_record(record):
    """Asynchronously saves a record to a CSV file."""
    # Check if the CSV file already exists
    file_exists = os.path.isfile(DATABASE_FILE)

    # Open the CSV file in append mode and write the record
    async with aiofiles.open(DATABASE_FILE, "a", newline="") as f:
        writer = csv.DictWriter(f, fieldnames=CSV_HEADERS)
        
        # Write headers only if the file is new
        if not file_exists:
            await f.write(",".join(CSV_HEADERS) + "\n")

        # Write the record to the CSV file
        await f.write(",".join(str(record.get(header, "")) for header in CSV_HEADERS) + "\n")
        print("Record saved successfully to CSV.")

async def async_load_records():
    """Asynchronously loads all records from a CSV file."""
    records = []
    # Check if the CSV file exists
    if not os.path.isfile(DATABASE_FILE):
        print("No data found.")
        return records

    # Open the CSV file and read the records
    async with aiofiles.open(DATABASE_FILE, "r") as f:
        async for line in f:
            # Skip the header line
            if line.startswith(CSV_HEADERS[0]):
                continue
            # Parse each line into a dictionary based on CSV headers
            values = line.strip().split(",")
            record = {CSV_HEADERS[i]: values[i] for i in range(len(CSV_HEADERS))}
            records.append(record)

    print("Records loaded successfully from CSV.")
    return records

# Sample usage of async_save_record and async_load_records
async def main():
    # Sample record to store
    record = {
        "user_id": "sample_user",
        "overall_analysis": "certain",
        "cat_dog": "cats",
        "fur_value": "long",
        "tail_value": "short",
        "description": "Sample description generated by AI"
    }

    # Save a record asynchronously
    await async_save_record(record)

    # Load all records asynchronously
    records = await async_load_records()
    print("Loaded records:", records)

# Run the main function to test
asyncio.run(main())
